name: Deploy to Walrus

on:
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to deploy to'
        required: true
        default: 'testnet'
        type: choice
        options:
        - testnet
        - mainnet
      epochs:
        description: 'Storage duration in epochs (testnet: 1 epoch = 2 days, mainnet: 1 epoch = 14 days)'
        required: true
        default: '5'
        type: string
      force_rebuild:
        description: 'Force rebuild even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  NETWORK: ${{ github.event.inputs.network || 'testnet' }}
  EPOCHS: ${{ github.event.inputs.epochs || '2' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    outputs:
      site_url: ${{ steps.deploy.outputs.site_url }}
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
      epochs_used: ${{ steps.deploy.outputs.epochs_used }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js (if package.json exists)
      if: hashFiles('package.json') != ''
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies and build (if needed)
      if: hashFiles('package.json') != ''
      run: |
        npm ci
        npm run build
    
    - name: Verify dist directory exists
      run: |
        if [ ! -d "./dist" ]; then
          echo "‚ùå Error: ./dist directory not found!"
          echo "Please ensure your build process creates a ./dist directory with static files."
          exit 1
        fi
        echo "‚úÖ Found ./dist directory with $(find ./dist -type f | wc -l) files"
        
    - name: Setup Rust and Cargo
      run: |
        echo "ü¶Ä Installing Rust and Cargo..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source $HOME/.cargo/env
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        export PATH="$HOME/.cargo/bin:$PATH"
        rustc --version
        cargo --version
        echo "‚úÖ Rust and Cargo installed successfully"
        
    - name: Install Sui CLI
      run: |
        # Install Sui CLI using Cargo (official method)
        echo "üîß Installing Sui CLI via Cargo..."
        source $HOME/.cargo/env
        export PATH="$HOME/.cargo/bin:$PATH"
        
        # Install Sui CLI from the official repository
        cargo install --locked --git https://github.com/MystenLabs/sui.git --branch testnet sui
        
        # Verify installation
        SUI_BIN="$HOME/.cargo/bin/sui"
        if [ -f "$SUI_BIN" ]; then
          echo "‚úÖ Sui CLI installed successfully at: $SUI_BIN"
          $SUI_BIN --version
          # Store the binary path for later steps
          echo "SUI_BINARY_PATH=$SUI_BIN" >> $GITHUB_ENV
        else
          echo "‚ùå Sui CLI installation failed"
          echo "Checking cargo installation directory..."
          ls -la "$HOME/.cargo/bin/" 2>/dev/null || echo "Cargo bin directory not found"
          echo "PATH: $PATH"
          exit 1
        fi
        
    - name: Install Walrus CLI
      run: |
        # Install Walrus CLI for the specified network
        if [ "$NETWORK" = "mainnet" ]; then
          curl -sSf https://install.wal.app | sh
        else
          curl -sSf https://install.wal.app | sh -s -- -n testnet
        fi
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Download Walrus site-builder
      run: |
        # Determine system architecture
        ARCH=$(uname -m)
        if [ "$ARCH" = "x86_64" ]; then
          SYSTEM="ubuntu-x64"
        elif [ "$ARCH" = "aarch64" ]; then
          SYSTEM="ubuntu-arm64"
        else
          echo "‚ùå Unsupported architecture: $ARCH"
          exit 1
        fi
        
        # Download appropriate site-builder binary
        if [ "$NETWORK" = "mainnet" ]; then
          curl -L "https://storage.googleapis.com/mysten-walrus-binaries/site-builder-mainnet-latest-$SYSTEM" -o site-builder
        else
          curl -L "https://storage.googleapis.com/mysten-walrus-binaries/site-builder-testnet-latest-$SYSTEM" -o site-builder
        fi
        
        chmod +x site-builder
        echo "‚úÖ Downloaded site-builder for $SYSTEM ($NETWORK)"
        
    - name: Setup Walrus configuration
      run: |
        # Create config directories
        mkdir -p ~/.config/walrus
        mkdir -p ~/.sui/sui_config
        
        # Copy repository configs to expected locations
        cp config/walrus-client.yaml ~/.config/walrus/client_config.yaml
        cp config/walrus-site.yaml ~/.config/walrus/site-config.yaml
        
        echo "‚úÖ Walrus configuration files installed"
        
    - name: Setup Sui wallet
      env:
        SUI_PRIVATE_KEY: ${{ secrets.SUI_PRIVATE_KEY }}
        SUI_ADDRESS: ${{ secrets.SUI_ADDRESS }}
      run: |
        if [ -z "$SUI_PRIVATE_KEY" ] || [ -z "$SUI_ADDRESS" ]; then
          echo "‚ùå Error: SUI_PRIVATE_KEY and SUI_ADDRESS secrets must be set in repository settings"
          echo "Please add these secrets to your GitHub repository:"
          echo "  - SUI_PRIVATE_KEY: Your Sui wallet private key (base64 encoded)"
          echo "  - SUI_ADDRESS: Your Sui wallet address"
          exit 1
        fi
        
        # Validate base64 encoding of private key
        if ! echo "$SUI_PRIVATE_KEY" | base64 -d > /dev/null 2>&1; then
          echo "‚ùå Error: SUI_PRIVATE_KEY is not properly base64 encoded"
          echo "Please ensure your private key is base64 encoded:"
          echo "  1. Get your private key: $HOME/.cargo/bin/sui keytool export --key-identity <address> --json"
          echo "  2. Or encode it: echo 'your_private_key' | base64"
          echo "  3. Update the SUI_PRIVATE_KEY secret with the base64 result"
          exit 1
        fi
        
        # Use the Sui binary path from the installation step
        SUI_BIN="${SUI_BINARY_PATH:-$HOME/.cargo/bin/sui}"
        
        # Verify the binary is still available
        if ! command -v "$SUI_BIN" >/dev/null 2>&1 && [ ! -f "$SUI_BIN" ]; then
          echo "‚ùå Error: Sui CLI not found at $SUI_BIN"
          echo "Available files in $HOME/.cargo/bin:"
          ls -la "$HOME/.cargo/bin/" 2>/dev/null || echo "Directory not found"
          echo "PATH: $PATH"
          exit 1
        fi
        
        # Initialize Sui client to create initial config
        $SUI_BIN client --help > /dev/null 2>&1 || true
        
        # Create Sui client config
        cat > ~/.sui/sui_config/client.yaml << EOF
        keystore:
          File: ~/.sui/sui_config/sui.keystore
        envs:
          - alias: $NETWORK
            rpc: "https://fullnode.$NETWORK.sui.io:443"
            ws: ~
        active_env: $NETWORK
        active_address: "$SUI_ADDRESS"
        EOF
        
        # Import private key - create keystore from the decoded private key
        PRIVATE_KEY_DECODED=$(echo "$SUI_PRIVATE_KEY" | base64 -d)
        echo "$PRIVATE_KEY_DECODED" > ~/.sui/sui_config/sui.keystore
        
        # Verify wallet setup using full path
        $SUI_BIN client active-address
        echo "‚úÖ Sui wallet configured for $NETWORK"
        
    - name: Check and fund wallet (testnet only)
      if: env.NETWORK == 'testnet'
      env:
        SUI_ADDRESS: ${{ secrets.SUI_ADDRESS }}
      run: |
        # Use the Sui binary path from the installation step
        SUI_BIN="${SUI_BINARY_PATH:-$HOME/.cargo/bin/sui}"
        
        # Check current balance
        BALANCE=$($SUI_BIN client gas --json | jq -r '.[0].balance // 0')
        echo "Current balance: $BALANCE MIST"
        
        # If balance is low (less than 1 SUI = 1000000000 MIST), request from faucet
        if [ "$BALANCE" -lt "1000000000" ]; then
          echo "üí∞ Balance low, requesting from testnet faucet..."
          curl -X POST "https://faucet.testnet.sui.io/gas" \
            -H "Content-Type: application/json" \
            -d "{\"FixedAmountRequest\":{\"recipient\":\"$SUI_ADDRESS\"}}"
          
          # Wait for faucet transaction to process
          sleep 10
          
          NEW_BALANCE=$($SUI_BIN client gas --json | jq -r '.[0].balance // 0')
          echo "New balance: $NEW_BALANCE MIST"
        else
          echo "‚úÖ Sufficient balance available"
        fi
        
    - name: Get WAL tokens
      run: |
        echo "ü™ô Getting WAL tokens..."
        walrus get-wal
        echo "‚úÖ WAL tokens acquired"
        
    - name: Deploy to Walrus
      id: deploy
      run: |
        echo "üöÄ Deploying to Walrus ($NETWORK) for $EPOCHS epochs..."
        
        # Run deployment and capture output
        DEPLOY_OUTPUT=$(./site-builder --config ~/.config/walrus/site-config.yaml \
                                      --context "$NETWORK" \
                                      deploy ./dist \
                                      --epochs "$EPOCHS" 2>&1)
        
        echo "$DEPLOY_OUTPUT"
        
        # Extract site URL from output (look for the localhost URL pattern)
        SITE_ID=$(echo "$DEPLOY_OUTPUT" | grep -o 'http://[a-z0-9]*\.localhost:3000' | sed 's/http:\/\///' | sed 's/\.localhost:3000//')
        
        if [ -n "$SITE_ID" ]; then
          if [ "$NETWORK" = "mainnet" ]; then
            SITE_URL="https://${SITE_ID}.walrus.site"
          else
            SITE_URL="https://${SITE_ID}.buildonwalrus.dev"
          fi
          
          echo "‚úÖ Deployment successful!"
          echo "üåê Site URL: $SITE_URL"
          echo "‚è∞ Storage duration: $EPOCHS epochs"
          
          # Set outputs
          echo "site_url=$SITE_URL" >> $GITHUB_OUTPUT
          echo "deployment_id=$SITE_ID" >> $GITHUB_OUTPUT
          echo "epochs_used=$EPOCHS" >> $GITHUB_OUTPUT
          
          # Create deployment summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## üéâ Walrus Deployment Successful
          
          **Network:** $NETWORK  
          **Site URL:** [$SITE_URL]($SITE_URL)  
          **Deployment ID:** \`$SITE_ID\`  
          **Storage Duration:** $EPOCHS epochs  
          **Expires:** $(date -d "+$(($EPOCHS * $([ "$NETWORK" = "mainnet" ] && echo 14 || echo 2))) days" '+%Y-%m-%d')
          
          Your site is now live on the Walrus decentralized storage network! üéä
          EOF
        else
          echo "‚ùå Failed to extract site URL from deployment output"
          echo "Full output:"
          echo "$DEPLOY_OUTPUT"
          exit 1
        fi
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && steps.deploy.outputs.site_url
      uses: actions/github-script@v7
      with:
        script: |
          const siteUrl = '${{ steps.deploy.outputs.site_url }}';
          const network = '${{ env.NETWORK }}';
          const epochs = '${{ env.EPOCHS }}';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üåê Walrus Preview Deployment
            
            Your site has been deployed to Walrus **${network}**!
            
            **üîó Preview URL:** ${siteUrl}
            **‚è∞ Storage Duration:** ${epochs} epochs
            **üåê Network:** ${network}
            
            This deployment will be available for ${epochs} epochs (${network === 'mainnet' ? epochs * 14 : epochs * 2} days).`
          });
