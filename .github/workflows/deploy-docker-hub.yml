name: Deploy to Walrus using Docker Hub Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to deploy to'
        required: true
        default: 'testnet'
        type: choice
        options:
        - testnet
        - mainnet
      epochs:
        description: 'Storage duration in epochs (testnet: 1 epoch = 2 days, mainnet: 1 epoch = 14 days)'
        required: true
        default: '1'
        type: string

env:
  NETWORK: ${{ github.event.inputs.network || 'testnet' }}
  EPOCHS: ${{ github.event.inputs.epochs || '1' }}
  DOCKER_IMAGE: deepsp94/walrus-deployment:latest

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    outputs:
      site_url: ${{ steps.deploy.outputs.site_url }}
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
      epochs_used: ${{ steps.deploy.outputs.epochs_used }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Pull Docker image from Docker Hub
      run: |
        echo "üê≥ Pulling Docker image: $DOCKER_IMAGE"
        docker pull $DOCKER_IMAGE
        echo "‚úÖ Docker image pulled successfully"
        
    - name: Install dependencies and build (if package.json exists)
      if: hashFiles('package.json') != ''
      run: |
        npm ci
        npm run build
    
    - name: Verify dist directory exists
      run: |
        if [ ! -d "./dist" ]; then
          echo "‚ùå Error: ./dist directory not found!"
          echo "Please ensure your build process creates a ./dist directory with static files."
          exit 1
        fi
        echo "‚úÖ Found ./dist directory with $(find ./dist -type f | wc -l) files"
        
    - name: Prepare environment file
      env:
        SUI_PRIVATE_KEY: ${{ secrets.SUI_PRIVATE_KEY }}
        SUI_ADDRESS: ${{ secrets.SUI_ADDRESS }}
      run: |
        # Validate required secrets
        if [ -z "$SUI_PRIVATE_KEY" ] || [ -z "$SUI_ADDRESS" ]; then
          echo "‚ùå Error: SUI_PRIVATE_KEY and SUI_ADDRESS secrets must be set in repository settings"
          echo "Please add these secrets to your GitHub repository:"
          echo "  - SUI_PRIVATE_KEY: Your Sui wallet private key (base64 encoded)"
          echo "  - SUI_ADDRESS: Your Sui wallet address"
          exit 1
        fi
        
        # Validate base64 encoding of private key
        if ! echo "$SUI_PRIVATE_KEY" | base64 -d > /dev/null 2>&1; then
          echo "‚ùå Error: SUI_PRIVATE_KEY is not properly base64 encoded"
          echo "Please ensure your private key is base64 encoded:"
          echo "  1. Get your private key: sui keytool export --key-identity <address> --json"
          echo "  2. Or encode it: echo 'your_private_key' | base64"
          echo "  3. Update the SUI_PRIVATE_KEY secret with the base64 result"
          exit 1
        fi
        
        echo "‚úÖ Environment validation completed"
        
    - name: Deploy to Walrus using Docker
      id: deploy
      env:
        SUI_PRIVATE_KEY: ${{ secrets.SUI_PRIVATE_KEY }}
        SUI_ADDRESS: ${{ secrets.SUI_ADDRESS }}
      run: |
        echo "üöÄ Starting Walrus deployment using Docker container..."
        
        # Run Docker container with proper Sui wallet setup
        echo "üöÄ Running deployment container with Sui wallet setup..."
        docker run --rm \
          -v "$(pwd)/dist:/dist" \
          -v "$(pwd)/config/walrus-client.yaml:/root/.config/walrus/client_config.yaml" \
          -v "$(pwd)/config/walrus-site.yaml:/root/.config/walrus/site-config.yaml" \
          -e SUI_PRIVATE_KEY="$SUI_PRIVATE_KEY" \
          -e SUI_ADDRESS="$SUI_ADDRESS" \
          -e NETWORK="$NETWORK" \
          -e EPOCHS="$EPOCHS" \
          $DOCKER_IMAGE \
          /bin/bash -c "
            echo 'üîß Setting up Sui wallet inside container...'
            
            # Create Sui directories
            mkdir -p ~/.sui/sui_config
            
            # Validate base64 encoding of private key
            if ! echo \"\$SUI_PRIVATE_KEY\" | base64 -d > /dev/null 2>&1; then
              echo '‚ùå Error: SUI_PRIVATE_KEY is not properly base64 encoded'
              exit 1
            fi
            
            # Create Sui client config
            cat > ~/.sui/sui_config/client.yaml << EOF
keystore:
  File: ~/.sui/sui_config/sui.keystore
envs:
  - alias: \$NETWORK
    rpc: \"https://fullnode.\$NETWORK.sui.io:443\"
    ws: ~
active_env: \$NETWORK
active_address: \"\$SUI_ADDRESS\"
EOF
            
            # Import private key - create keystore from the decoded private key
            echo \"\$SUI_PRIVATE_KEY\" | base64 -d > ~/.sui/sui_config/sui.keystore
            
            echo '‚úÖ Sui wallet configured'
            
            # Check wallet setup
            echo 'üí∞ Checking Sui wallet setup...'
            sui client active-address || echo 'Warning: Could not verify active address'
            
            # Check wallet balance
            echo 'üí∞ Checking wallet balance...'
            BALANCE=\$(sui client gas --json 2>/dev/null | jq -r '.[0].balance // 0' 2>/dev/null || echo '0')
            echo \"Current SUI balance: \$BALANCE MIST\"
            
            if [ \"\$BALANCE\" = '0' ]; then
              echo '‚ö†Ô∏è  Warning: No SUI balance detected. Deployment may fail if gas is needed.'
            else
              echo '‚úÖ SUI balance available for gas fees'
            fi
            
            echo 'üöÄ Starting Walrus deployment...'
            /usr/local/bin/site-builder --config /root/.config/walrus/site-config.yaml --context \$NETWORK deploy /dist --epochs \$EPOCHS
          "
        
        echo "‚úÖ Deployment command completed"
        
    - name: Cleanup
      if: always()
      run: |
        echo "‚úÖ Cleanup completed"
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && steps.deploy.outputs.site_url
      uses: actions/github-script@v7
      with:
        script: |
          const siteUrl = '${{ steps.deploy.outputs.site_url }}';
          const network = '${{ env.NETWORK }}';
          const epochs = '${{ env.EPOCHS }}';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üåê Walrus Preview Deployment (Docker Hub)
            
            Your site has been deployed to Walrus **${network}** using Docker image \`deepsp94/walrus-deployment:latest\`!
            
            **üîó Preview URL:** ${siteUrl}
            **‚è∞ Storage Duration:** ${epochs} epochs
            **üåê Network:** ${network}
            
            This deployment will be available for ${epochs} epochs (${network === 'mainnet' ? epochs * 14 : epochs * 2} days).`
          });
