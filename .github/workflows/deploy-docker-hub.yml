name: Deploy to Walrus using Docker Hub Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to deploy to'
        required: true
        default: 'testnet'
        type: choice
        options:
        - testnet
        - mainnet
      epochs:
        description: 'Storage duration in epochs (testnet: 1 epoch = 2 days, mainnet: 1 epoch = 14 days)'
        required: true
        default: '1'
        type: string

env:
  NETWORK: ${{ github.event.inputs.network || 'testnet' }}
  EPOCHS: ${{ github.event.inputs.epochs || '1' }}
  DOCKER_IMAGE: deepsp94/walrus-deployment:latest

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    outputs:
      site_url: ${{ steps.deploy.outputs.site_url }}
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
      epochs_used: ${{ steps.deploy.outputs.epochs_used }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Pull Docker image from Docker Hub
      run: |
        echo "🐳 Pulling Docker image: $DOCKER_IMAGE"
        docker pull $DOCKER_IMAGE
        echo "✅ Docker image pulled successfully"
        
    - name: Install dependencies and build (if package.json exists)
      if: hashFiles('package.json') != ''
      run: |
        npm ci
        npm run build
    
    - name: Verify dist directory exists
      run: |
        if [ ! -d "./dist" ]; then
          echo "❌ Error: ./dist directory not found!"
          echo "Please ensure your build process creates a ./dist directory with static files."
          exit 1
        fi
        echo "✅ Found ./dist directory with $(find ./dist -type f | wc -l) files"
        
    - name: Prepare environment file
      env:
        SUI_PRIVATE_KEY: ${{ secrets.SUI_PRIVATE_KEY }}
        SUI_ADDRESS: ${{ secrets.SUI_ADDRESS }}
      run: |
        # Validate required secrets
        if [ -z "$SUI_PRIVATE_KEY" ] || [ -z "$SUI_ADDRESS" ]; then
          echo "❌ Error: SUI_PRIVATE_KEY and SUI_ADDRESS secrets must be set in repository settings"
          echo "Please add these secrets to your GitHub repository:"
          echo "  - SUI_PRIVATE_KEY: Your Sui wallet private key"
          echo "  - SUI_ADDRESS: Your Sui wallet address"
          exit 1
        fi
        
        # Create .env file for Docker container
        cat > .env << EOF
        SUI_PRIVATE_KEY=$SUI_PRIVATE_KEY
        SUI_ADDRESS=$SUI_ADDRESS
        NETWORK=$NETWORK
        EPOCHS=$EPOCHS
        EOF
        
        echo "✅ Environment file prepared"
        
    - name: Deploy to Walrus using Docker
      id: deploy
      env:
        SUI_PRIVATE_KEY: ${{ secrets.SUI_PRIVATE_KEY }}
        SUI_ADDRESS: ${{ secrets.SUI_ADDRESS }}
      run: |
        echo "🚀 Starting Walrus deployment using Docker container..."
        
        # Debug: Check what's in the container first
        echo "🔍 Debugging Docker container contents..."
        docker run --rm $DOCKER_IMAGE /bin/bash -c "
          echo 'Container contents:'
          ls -la /
          echo 'Checking for site-builder binary:'
          which site-builder || echo 'site-builder not found in PATH'
          ls -la /usr/local/bin/ | grep site || echo 'No site-builder in /usr/local/bin/'
          echo 'PATH is: $PATH'
        "
        
        # Run Docker container with proper configuration
        DEPLOY_OUTPUT=$(docker run --rm \
          -v "$(pwd)/dist:/dist" \
          -v "$(pwd)/config/walrus-client.yaml:/root/.config/walrus/client_config.yaml" \
          -v "$(pwd)/config/walrus-site.yaml:/root/.config/walrus/site-config.yaml" \
          -e SUI_PRIVATE_KEY="$SUI_PRIVATE_KEY" \
          -e SUI_ADDRESS="$SUI_ADDRESS" \
          -e NETWORK="$NETWORK" \
          -e EPOCHS="$EPOCHS" \
          $DOCKER_IMAGE \
          /bin/bash -c "
            echo 'Starting deployment...'
            echo 'Checking mounted files:'
            ls -la /dist/ || echo 'No /dist directory'
            ls -la /root/.config/walrus/ || echo 'No walrus config directory'
            echo 'Environment variables:'
            echo 'NETWORK=$NETWORK'
            echo 'EPOCHS=$EPOCHS'
            echo 'SUI_ADDRESS=$SUI_ADDRESS'
            echo 'Attempting to run site-builder...'
            /usr/local/bin/site-builder --config /root/.config/walrus/site-config.yaml --context $NETWORK deploy /dist --epochs $EPOCHS
          " 2>&1)
        
        echo "$DEPLOY_OUTPUT"
        
        # Extract site URL from output
        SITE_ID=$(echo "$DEPLOY_OUTPUT" | grep -o 'http://[a-z0-9]*\.localhost:3000' | sed 's/http:\/\///' | sed 's/\.localhost:3000//' | head -1)
        
        if [ -n "$SITE_ID" ]; then
          if [ "$NETWORK" = "mainnet" ]; then
            SITE_URL="https://${SITE_ID}.walrus.site"
          else
            SITE_URL="https://${SITE_ID}.buildonwalrus.dev"
          fi
          
          echo "✅ Deployment successful!"
          echo "🌐 Site URL: $SITE_URL"
          echo "⏰ Storage duration: $EPOCHS epochs"
          
          # Set outputs
          echo "site_url=$SITE_URL" >> $GITHUB_OUTPUT
          echo "deployment_id=$SITE_ID" >> $GITHUB_OUTPUT
          echo "epochs_used=$EPOCHS" >> $GITHUB_OUTPUT
          
          # Create deployment summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🎉 Walrus Deployment Successful (Docker Hub)
          
          **Docker Image:** \`$DOCKER_IMAGE\`  
          **Network:** $NETWORK  
          **Site URL:** [$SITE_URL]($SITE_URL)  
          **Deployment ID:** \`$SITE_ID\`  
          **Storage Duration:** $EPOCHS epochs  
          **Expires:** $(date -d "+$(($EPOCHS * $([ "$NETWORK" = "mainnet" ] && echo 14 || echo 2))) days" '+%Y-%m-%d')
          
          Your site is now live on the Walrus decentralized storage network! 🎊
          EOF
        else
          echo "❌ Failed to extract site URL from deployment output"
          echo "Full output:"
          echo "$DEPLOY_OUTPUT"
          exit 1
        fi
        
    - name: Cleanup
      if: always()
      run: |
        # Remove .env file for security
        rm -f .env
        echo "✅ Cleanup completed"
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && steps.deploy.outputs.site_url
      uses: actions/github-script@v7
      with:
        script: |
          const siteUrl = '${{ steps.deploy.outputs.site_url }}';
          const network = '${{ env.NETWORK }}';
          const epochs = '${{ env.EPOCHS }}';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🌐 Walrus Preview Deployment (Docker Hub)
            
            Your site has been deployed to Walrus **${network}** using Docker image \`deepsp94/walrus-deployment:latest\`!
            
            **🔗 Preview URL:** ${siteUrl}
            **⏰ Storage Duration:** ${epochs} epochs
            **🌐 Network:** ${network}
            
            This deployment will be available for ${epochs} epochs (${network === 'mainnet' ? epochs * 14 : epochs * 2} days).`
          });
